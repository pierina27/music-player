{"version":3,"sources":["views/TrackInformation.js","views/SongDetail.js","components/Player.js","components/Loading.js","services/PlayListService.js","constants/playlist.js","containers/PlayList.js","views/MusicPlayer.js","components/NavBar.js","views/ErrorBoundary.js","routes/Routes.js","App.js","serviceWorker.js","index.js"],"names":["TrackInformation","name","artist","artistPageUrl","album","className","SongDetail","props","JSON","parse","location","state","trackInformation","user_name","user_real_name","albun","upload_name","artist_page_url","Player","srcUrl","pauseSongHandler","playSongHandler","src","controls","autoPlay","onPause","onPlay","Loading","isLoading","message","CircularProgress","getPlayList","a","async","axios","get","theme","createMuiTheme","palette","primary","main","secondary","withRouter","history","useState","playlist","setPlaylist","setPlay","idPlaying","setIdPlaying","setLoading","setMessage","isPlaying","setIsPlaying","download_url","upload_id","e","preventDefault","console","log","document","querySelector","pause","goToDetail","i","push","stringify","useEffect","data","items","getPlaylistFromService","List","component","aria-label","map","ListItem","button","onClick","ListItemIcon","color","ListItemText","PlayList","useStyles","makeStyles","root","flexGrow","position","menuButton","marginRight","spacing","title","classes","AppBar","Toolbar","variant","Typography","Button","ErrorBoundary","error","this","setState","toString","children","React","Component","Routes","Container","maxWidth","exact","path","MusicPlayer","App","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fccaad3e.chunk.js","sourcesContent":["import React from 'react'\nimport '../resources/scss/trackInformation.scss'\n\nimport PropTypes from 'prop-types';\n\nexport default function TrackInformation({name, artist, artistPageUrl, album}) {\n    return (\n        <div className=\"trackInformation\">\n            <div className=\"cover\">Cover</div>\n            <div className=\"name\">{name}</div>\n            <div className=\"artist\">{artist}</div>\n            <div className=\"album\">{album} ({artistPageUrl})</div>\n        </div>\n    )\n}\n\nTrackInformation.propTypes = ({\n    name: PropTypes.string.isRequired,\n    artist: PropTypes.string.isRequired,\n    artistPageUrl: PropTypes.string.isRequired,\n    album: PropTypes.string.isRequired\n});\n","import React from 'react'\nimport TrackInformation from '../views/TrackInformation'\nimport '../resources/scss/songDetail.scss'\n\nexport default function SongDetail(props){\n    const {user_name, user_real_name, upload_name, artist_page_url} = JSON.parse(props.location.state)\n    const trackInformation = {name: user_name, artist: user_real_name, albun:upload_name, artistPageUrl:artist_page_url}\n    return (\n        <div className=\"player\">\n                <TrackInformation {...trackInformation}></TrackInformation>\n        </div>\n    )\n}","import React from 'react'\nimport ReactAudioPlayer from 'react-audio-player';\nimport PropTypes from 'prop-types';\n\nimport '../resources/scss/player.scss'\n\nexport default function Player ({ srcUrl, pauseSongHandler, playSongHandler }) {\n    return(\n        <div>\n            <ReactAudioPlayer\n                src={srcUrl}\n                controls\n                autoPlay\n                onPause={pauseSongHandler} \n                onPlay={playSongHandler}\n            />\n        </div>\n    )\n}\n\nPlayer.propTypes = ({\n    srcUrl: PropTypes.string.isRequired,\n    isPause: PropTypes.bool.isRequired,\n    pauseSongHandler: PropTypes.func.isRequired,\n    playSongHandler: PropTypes.func.isRequired,\n});\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport '../resources/scss/loading.scss'\n\nexport default function Loading({isLoading, message}) {\n\n    return (\n        <div className=\"loading\">\n            {isLoading && <CircularProgress className=\"center\" />}\n            <h4>{message}</h4>\n        </div>\n    );\n}","import axios from 'axios';\nimport { playlistEndpoint } from '../constants/playlist';\n\nconst getPlayList = async () => {\n    return await axios.get(playlistEndpoint)\n}\n\nexport { getPlayList }","const playlistEndpoint = 'http://ccmixter.org/api/queries?items=limit%3D20%26digrank%3D280%26reqtags%3Dremix%252C-autoplay%26lic%3Dopen%26dataview%3Dlinks_by%26cache%3D_1631703534%26f%3Djsex&total=f%3Dcount%26reqtags%3Dremix%252C-autoplay%26lic%3Dopen%26dataview%3Dlinks_by'\n\nexport { playlistEndpoint }","import React, { useEffect, useState } from 'react'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport DiscFullIcon from '@material-ui/icons/DiscFull';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport {withRouter} from 'react-router-dom'\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nimport Player from '../components/Player'\nimport Loading from '../components/Loading';\nimport { getPlayList } from '../services/PlayListService'\nimport '../resources/scss/playlist.scss'\n\nconst theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: '#58FFC1'\n      },\n      secondary: {\n        main: '#D557FF'\n      }\n    }\n  });\n\nfunction PlayListComponent({history}){\n    const [playlist, setPlaylist] = useState([])\n    const [srcUrl, setPlay] = useState(\"\")\n    const [idPlaying, setIdPlaying] = useState(0)\n    const [isLoading, setLoading] = useState(0)\n    const [message, setMessage] = useState('')\n    const [isPlaying, setIsPlaying] = useState(false)\n\n    const playSongHandler = ({download_url, upload_id} = {}) => (e) => {\n        e.preventDefault()\n        console.log(download_url, upload_id)\n        download_url && setPlay(download_url)\n        upload_id && setIdPlaying(+upload_id)\n        setIsPlaying(true)\n    }\n\n    const pauseSongHandler = (e) => {\n        document.querySelector('audio').pause()\n        setIsPlaying(false)\n    }\n\n    const goToDetail = (i) => () => {\n        history.push('/detail', JSON.stringify(i))\n    }\n\n    useEffect(() => {\n        async function getPlaylistFromService(){\n            setLoading(true)\n            setMessage('Loading the wonderful music...')\n            try{\n                const {data} = await getPlayList()\n                setPlaylist(data[0].items)\n                setMessage('')\n            } catch(e){\n                setMessage('Sorry connection error..')\n                setPlaylist([])\n            }\n            \n            setLoading(false)\n       }\n    \n       getPlaylistFromService()\n      }, [])\n\n      return(\n        <MuiThemeProvider theme={theme}>\n            <div className=\"playlist\">\n                <List component=\"nav\" aria-label=\"main mailbox folders\" >\n                    {playlist.map(i => (\n                        <ListItem button onClick={idPlaying !== +i.upload_id ? playSongHandler(i) : pauseSongHandler}>\n                        <ListItemIcon>\n                    { idPlaying === +i.upload_id && isPlaying ? <PauseIcon color=\"primary\" /> : <PlayArrowIcon color=\"secondary\"/> }\n                        </ListItemIcon>\n                        <ListItemText primary={i.upload_name} secondary={i.user_real_name}/>\n                        <ListItemIcon onClick={goToDetail(i)} >\n                            <DiscFullIcon color=\"secondary\"/>\n                        </ListItemIcon>\n                    </ListItem>\n                    ))}\n                </List>\n                {(isLoading || message) && <Loading isLoading={isLoading} message={message}/>}\n            </div>\n            <Player srcUrl={srcUrl} pauseSongHandler={pauseSongHandler} playSongHandler={playSongHandler()}></Player>\n        </MuiThemeProvider>\n      )\n}\n\n\nexport default withRouter(PlayListComponent)","import React  from \"react\";\nimport {withRouter} from 'react-router-dom'\nimport PlayList from '../containers/PlayList'\n\n\n function MusicPlayer(){\n    return(\n        <PlayList></PlayList>\n    )\n}\n\nexport default withRouter(MusicPlayer)","import React from 'react'\nimport {makeStyles} from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport {withRouter} from 'react-router-dom'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    position: 'relative'\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}))\n\n\nfunction NavBar({name, history}) {\n  const classes = useStyles()\n\n  function handleNavigation() {\n    history.push('/')\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <Typography variant=\"h6\" className={classes.title}>\n            {name}\n          </Typography>\n          <Button variant=\"contained\" color=\"secondary\" onClick={handleNavigation}>\n            Home\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default withRouter(NavBar)\n","import React from 'react'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      error: ''\n    }\n  }\n\n  componentDidCatch(error) {\n    // Catch errors in any child components and re-renders with an error message\n    this.setState({\n      error: error.message\n    })\n  }\n\n  render() {\n    if (this.state.error) {\n      // Fallback UI if an error occurs\n      return (\n        <div>\n          <h2>{'Oh-no! Something went wrong'}</h2>\n          <div>{'Component Stack Error Details: '}</div>\n          <p className=\"red\">{this.state.error && this.state.error.toString()}</p>\n        </div>\n      )\n    }\n    // component normally just renders children\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary\n","import React from 'react'\nimport SongDetail from '../views/SongDetail'\nimport MusicPlayer from '../views/MusicPlayer'\nimport NavBar from '../components/NavBar'\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport ErrorBoundary from '../views/ErrorBoundary'\nimport Container from '@material-ui/core/Container'\nimport '../resources/scss/main.scss'\n\n/* Routes */\n/* Nav, autentification, error bundle */\nfunction Routes() {\n  return (\n    <ErrorBoundary>\n      <BrowserRouter>\n      <Container maxWidth=\"sm\">\n        <NavBar className=\"navBar\" name=\"Music Player from Matzii\"></NavBar>\n        <Route exact path=\"/\" component={MusicPlayer} />\n        <Route path=\"/detail\" component={SongDetail} />\n      </Container>\n      </BrowserRouter>\n    </ErrorBoundary>\n  )\n}\n\nexport default Routes\n","import React from 'react';\nimport Routes from './routes/Routes'\n\n/* Routes */\n/* Nav, autentification, error bundle */\nfunction App() {\n\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}